<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
option=0;
options=6;
soptions[0]=3;
soptions[1]=2;
soptions[2]=2;
soptions[3]=0;
soptions[4]=0;
soptions[5]=0;
soption[0]=1;
soption[1]=1;
ini_open(working_directory+"settings.ini") {
    soption[0]=ini_read_real("main","graphics",0)+1;
    soption[1]=ini_read_real("main","touch",0)+1;
    soption[2]=ini_read_real("main","usemouse",1)+1;
    ini_close();
}
otext[0,0]="Graphics";
    otext[0,1]="fast";
    otext[0,2]="decent";
    otext[0,3]="fancy";
otext[1,0]="Touchscreen";
    otext[1,1]="off";
    otext[1,2]="on";
otext[2,0]="Input";
    otext[2,1]="virtual keys only";
    otext[2,2]="virtual keys + touchscreen";
otext[3,0]="Reset game";
otext[4,0]="Save";
otext[5,0]="&lt;- Return";

if os_type==os_windows||os_type==os_linux||os_type==os_macosx||os_type==os_unknown {
    otext[2,1]="keyboard only";
    otext[2,2]="keyboard + mouse";
    options+=2;
    soptions[3]=3;
    soptions[4]=2;
    soptions[5]=0;
    soptions[6]=0;
    soptions[7]=0;
    soption[3]=1;
    soption[4]=1;
    ini_open(working_directory+"settings.ini") {
        soption[3]=ini_read_real("main","windowsize",0);
        soption[4]=ini_read_real("main","fullscreen",0)+1;
        ini_close();
    }
    otext[3,0]="Window Size";
        otext[3,1]="1x";
        otext[3,2]="2x";
        otext[3,3]="3x";
    otext[4,0]="Fullscreen";
        otext[4,1]="off";
        otext[4,2]="on";
    otext[5,0]="Reset game";
    otext[6,0]="Save";
    otext[7,0]="&lt;- Return";
}

fade=1;
fadeinout=1;

//Transition
bga=0;
transition=1;

//Sound
audio_stop_sound(bgmFNAFtitle);
audio_play_sound(bgsOfficeFan,90,1);

//Dialouge handling
avatar=-1;
del=0;
deli=0;
reset=-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transition into room and handle user input
if bga&lt;1&amp;&amp;transition==1 {
    bga+=0.05;
}
if transition == 0 {
    bga-=0.05;
}
if bga==0 {
    if global.ingame instance_activate_object(ctrlPause);
    else instance_create(0,288,ctrlIntro);
    audio_stop_sound(bgsOfficeFan);
    instance_destroy();
}
if del {
    if !instance_exists(objDialouge) {
        del=0;
        deli=0;
    } else if keyboard_check(vk_delete)&amp;&amp;deli&gt;room_speed*3 {
        audio_play_sound(sndend1,100,0);
        reset=room_speed;
        file_delete(working_directory+"slot1.fnafb");
        file_delete(working_directory+"slot2.fnafb");
        file_delete(working_directory+"slot3.fnafb");
        file_delete(working_directory+"slot4.fnafb");
        file_delete(working_directory+"slot1.fnafb.meta");
        file_delete(working_directory+"slot2.fnafb.meta");
        file_delete(working_directory+"slot3.fnafb.meta");
        file_delete(working_directory+"slot4.fnafb.meta");
        file_delete(working_directory+"temp.fnafb");
        file_delete(working_directory+"temp.fnafb.meta");
        deli=-1;
        objDialouge.visible=0;
    }
    deli++
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse controls
//Do mouse related stuff
if !del &amp;&amp; global.usemouse {
    var i=0;
    repeat(options) {
        if mouse_y&gt;128+(i*24)&amp;&amp;mouse_y&lt;128+((i+1)*24) {
            if option!=i {
                option=i;
                audio_play_sound(sndblip3,90,0);
            }
        }
        i++;
    }
    if mouse_check_button_pressed(mb_left)&amp;&amp;mouse_y&gt;y&amp;&amp;mouse_y&lt;128+options*24 {
        if mouse_y&gt;128+(option*24)&amp;&amp;mouse_y&lt;128+((option+1)*24) {
            event_perform(ev_keypress,vk_enter);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard controls
if !del {
    if keyboard_check_pressed(vk_escape)||keyboard_check_pressed(vk_backspace) {
        audio_play_sound(sndwindup2,90,0);
        transition=0;
    }
    if keyboard_check_pressed(vk_up) {
        if option&gt;=1 {
            option--;
        } else {
            option=options-1;
        }
        audio_play_sound(sndblip3,90,0);
    }
    if keyboard_check_pressed(vk_down) {
        option++;
        if option&gt;=options {
            option=0;
        }
        audio_play_sound(sndblip3,90,0);
    }
    if keyboard_check_pressed(vk_left)&amp;&amp;option&lt;options-3 {
        soption[option]--;
        if soption[option]&lt;1 {
            soption[option]=soptions[option];
        }
        audio_play_sound(sndblip3,90,0);
    }
    if keyboard_check_pressed(vk_right)&amp;&amp;option&lt;options-3 {
        soption[option]++;
        if soption[option]&gt;soptions[option] {
            soption[option]=1;
        }
        audio_play_sound(sndblip3,90,0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw menu
draw_set_alpha(bga);
draw_background(OfficeOn,0,0);

var i=0;
if fade==0.5 { fadeinout=0; }
if fade==1 {fadeinout=1; }
if fadeinout==1 { fade=fade-0.05; }
if fadeinout==0 { fade=fade+0.05; }
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_alpha(bga);
draw_set_font(fntHeader);
draw_text(16,16,"Settings");
draw_set_font(fntMain);
repeat(options) {
    draw_text(16,128+(i*24),otext[i,0]);
    if option == i {
        draw_set_alpha(bga*fade);
        draw_line(16,144+(i*24),128,144+(i*24));
        draw_set_alpha(bga);
    }
    ix=140;
    is=1;
    repeat(soptions[i]) {
        if soption[i]!=is {
            draw_set_colour(c_gray);
        }
        draw_text(16+ix,128+(i*24),otext[i,is]);
        ix+=string_width(otext[i,is])+8;
        is++;
        draw_set_colour(c_white);
    }
    i++;
}
//Reset the game easter egg
if reset&gt;0 {
    reset--;
    draw_sprite(seqgoldenfreddy,0,0,0);
    if reset==0 {
        audio_stop_all();
        game_restart();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply/change settings
if !del {
    honk=1;
    tgl=options-3;
    if option&lt;tgl { //Change settings
        soption[option]++;
        if soption[option]&gt;soptions[option] {
            soption[option]=1;
        }
        audio_play_sound(sndblip3,90,0);
        honk=0;
    }
    if option==tgl { //Reset the game
        del=1;
        dialouge("To delete all saved data, hold down delete for 3 seconds.",0,0);
    }
    if option==tgl+1 { //Save the game
        //Save cross-platform settings first
        global.graphics=soption[0]-1;
        global.touch=soption[1]-1;
        global.usemouse=soption[2]-1;
        if !global.usemouse&amp;&amp;global.touch touchctrl(0);
        else touchctrl(1,0);
        if os_type==os_windows||os_type==os_linux||os_type==os_macosx||os_type==os_unknown {
            //Save desktop specfic settings
            global.scale=soption[3];
            //Make game fit in screen
            if 544*global.scale&lt;display_get_width()&amp;&amp;416*global.scale&lt;display_get_height() {
                window_set_size(544*global.scale,416*global.scale);
            } else {
                global.scale=1;
                window_set_size(544*global.scale,416*global.scale);
            }
            display_set_gui_size(544*global.scale,416*global.scale);
            window_set_fullscreen(soption[3]-1);
            ctrlMaster.alarm[0]=1;
        }
        ini_open(working_directory+"settings.ini") {
            ini_write_real("main","graphics",global.graphics);
            ini_write_real("main","touch",global.touch);
            ini_write_real("main","usemouse",global.usemouse);
            if os_type==os_windows||os_type==os_linux||os_type==os_macosx||os_type==os_unknown {
                ini_write_real("main","windowsize",global.scale);
                ini_write_real("main","fullscreen",soption[4]-1);
            }
            ini_close();
        }
    }
    if option==tgl+2 { //Return
        audio_play_sound(sndwindup2,90,0);
        transition=0;
        honk=0;
    } if honk {
        audio_play_sound(sndhonk,90,0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
